# Distributed under the Boost Software License, Version 1.0.
# See http://www.boost.org/LICENSE_1_0.txt

cmake_minimum_required(VERSION 2.8.11)
cmake_policy(SET CMP0042 NEW)

project(BoostGraph CXX)

list(APPEND CURRENT_TARGET_SOURCES
    src/read_graphviz_new.cpp
    src/graphml.cpp
    )

if(BUILD_SHARED_LIBRARIES)
    add_library(boost_graph SHARED
        ${CURRENT_TARGET_SOURCES}
        )
else()
    add_library(boost_graph STATIC
        ${CURRENT_TARGET_SOURCES}
        )
endif()

if(CXX11_FOUND)
    set_property(TARGET boost_graph PROPERTY CXX_STANDARD 11)
endif()

target_include_directories(boost_graph PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        )

target_link_libraries(boost_graph PUBLIC
        boost::any
        boost::algorithm
        boost::assert
        boost::serialization
        boost::config
        boost::detail
        boost::foreach
        boost::function
        boost::fusion
        boost::exception
        boost::concept_check
        boost::conversion
        boost::regex
        boost::unordered
        boost::multi_index
        boost::lexical_cast
        boost::parameter
        boost::property_map
        boost::property_tree
        boost::xpressive
        boost::tuple
        boost::typeof
        )

add_library(boost::graph ALIAS boost_graph)
set_property(TARGET boost_graph PROPERTY EXPORT_NAME graph)

install(DIRECTORY include/ DESTINATION include)

install(TARGETS boost_graph EXPORT ${PROJECT_NAME}Targets
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        )

install(EXPORT ${PROJECT_NAME}Targets
        FILE ${PROJECT_NAME}Targets.cmake
        NAMESPACE boost::
        DESTINATION lib/cmake/${PROJECT_NAME}
        )

write_config_file("${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake"
        Any
        Algorithm
        Serialization
        Config
        Detail
        Foreach
        Function
        Fusion
        Exception
        ConceptCheck
        Conversion
        Regex
        Unordered
        MultiIndex
        LexicalCast
        Parameter
        PropertyMap
        PropertyTree
        Xpressive
        Tuple
        Typeof
        )
write_basic_package_version_file("${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake"
        VERSION ${BOOST_VERSION}
        COMPATIBILITY AnyNewerVersion
        )

install(FILES
        "${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}Config.cmake"
        "${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}ConfigVersion.cmake"
        DESTINATION lib/cmake/${PROJECT_NAME}
        )

export(TARGETS
        NAMESPACE boost::
        FILE ${CMAKE_BINARY_DIR}/lib/cmake/${PROJECT_NAME}/${PROJECT_NAME}Targets.cmake)

if(APPLE AND NOT ${CMAKE_TARGET_ARCHITECTURE} STREQUAL ${CMAKE_HOST_SYSTEM_PROCESSOR})
    set_target_properties(boost_graph PROPERTIES XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY ${APPLE_CODE_SIGN_IDENTITY})
    set_target_properties(boost_graph PROPERTIES XCODE_ATTRIBUTE_DEVELOPMENT_TEAM ${CMAKE_XCODE_ATTRIBUTE_DEVELOPMENT_TEAM})
endif()